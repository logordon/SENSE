#!/usr/bin/env python

import time
import RPi.GPIO as GPIO
import Adafruit_ADS1x15
import subprocess
import pytesseract
import os
import string
from PIL import Image
from picamera import PiCamera
from subprocess import call
from gtts import gTTS
from time import sleep
# Use BCM GPIO references
# instead of physical pin numbers
GPIO.setmode(GPIO.BCM)

# Define GPIO to use on Pi
GPIO_TRIGECHO = 14
GPIO_BUTTON = 24
print "Ultrasonic Measurement"

# Set pins as output and input
GPIO.setup(GPIO_TRIGECHO,GPIO.OUT)  # Initial state as output
GPIO.setup(GPIO_BUTTON, GPIO.IN)

# Set trigger to False (Low)
GPIO.output(GPIO_TRIGECHO, False)

#Create an ADS1115 instance
adc = Adafruit_ADS1x15.ADS1115()
GAIN=2
#os.chdir("/home/pi")

subprocess.call("mpg123 -q ~/poweron.mp3", shell=True)

camera = PiCamera()
#cameraInitiazlized = False
camera.rotation = 90
#camera.start_preview()

#subprocess.call("mpg123 -q ~/poweron.mp3", shell=True)
def takeSnapshot():
    #camera = PiCamera()
    #try:
        
    sleep(1)
    camera.capture("/home/pi/pictures/image.jpg")
    sleep(3)
    #camera.stop_preview()
    #finally:
        #camera.close()

def convertImage():
    #subprocess.call("mpg123 -q ~/converting.mp3", shell=True)
    #sleep(1)
    text = pytesseract.image_to_string(Image.open("/home/pi/pictures/image.jpg")).encode('utf-8')

    return text

def textToSpeech(text):
    tts = gTTS(text=text, lang='en')
    tts.save("/home/pi/speechFinal.mp3")
    subprocess.call("mpg123 -q ~/speechFinal.mp3", shell=True)
    sleep(3)

def measure():
  # This function measures a distance
  # Pulse the trigger/echo line to initiate a measurement
    GPIO.output(GPIO_TRIGECHO, True)
    time.sleep(0.00001)
    GPIO.output(GPIO_TRIGECHO, False)
    distance = [0]*3
    for i in range(3):
        distance[i] = adc.read_adc(i,gain=GAIN)

        # Distance in Inch (2^16 = 65535 for resolution)
        distance[i] = (distance[i] * 512)/65535

        # Distance in CM - 10 tolerance
        distance[i] = (distance[i] * 2.54)
        print ("distance{0} = {1}".format(i,distance[i]))
    
    right = distance[0]
    center = distance[1]
    left = distance[2]
    print("right:{0} ", right)
    print("center: {0} ", center)
    print("left: {0}", left)
   # Sensing from 0 - 100cm
    if right < 100 and left < 100 and center < 100:
        subprocess.call("aplay ~/straightahead_audio.wav", shell=True)
        for x in range(0,3):
            subprocess.call("aplay ~/beep_sense.wav", shell=True)
    elif left < 100  and right > 100 and center > 100:
        subprocess.call("aplay ~/left_audio.wav", shell=True)
        for x in range(0,3):
            subprocess.call("aplay ~/beep_sense.wav", shell=True)
    elif right < 100 and left > 100 and center > 100:
        subprocess.call("aplay ~/right_audio.wav", shell=True)
        for x in range(0,3):
            subprocess.call("aplay ~/beep_sense.wav", shell=True)
    elif left < 100 and center < 100 and right > 100:
        subprocess.call("aplay ~/centerleft_audio.wav", shell=True)
        for x in range(0,3):
            subprocess.call("aplay ~/beep_sense.wav", shell=True)
    elif right < 100 and center < 100 and left > 100:
        subprocess.call("aplay ~/centerright_audio.wav", shell=True)
        for x in range(0,3):
            subprocess.call("aplay ~/beep_sense.wav", shell=True)

    # Sensing from 100 - 200cm
    elif right < 200 and left < 200 and center < 200:
        subprocess.call("aplay ~/straightahead_audio.wav", shell=True)
        for x in range(0,2):
            subprocess.call("aplay ~/beep_sense.wav", shell=True)
    elif left < 200  and right > 200 and center > 200:
        subprocess.call("aplay ~/left_audio.wav", shell=True)
        for x in range(0,2):
            subprocess.call("aplay ~/beep_sense.wav", shell=True)
    elif right < 200 and left > 200 and center > 200:
        subprocess.call("aplay ~/right_audio.wav", shell=True)
        for x in range(0,2):
            subprocess.call("aplay ~/beep_sense.wav", shell=True)
    elif left < 200 and center < 200 and right > 200:
        subprocess.call("aplay ~/centerleft_audio.wav", shell=True)
        for x in range(0,2):
            subprocess.call("aplay ~/beep_sense.wav", shell=True)
    elif right < 200 and center < 200 and left > 200:
        subprocess.call("aplay ~/centerright_audio.wav", shell=True)
        for x in range(0,2):
            subprocess.call("aplay ~/beep_sense.wav", shell=True)

    # Sensing from 200 - 300cm
    elif right < 300 and left < 300 and center < 300:
        subprocess.call("aplay ~/straightahead_audio.wav", shell=True)
        for x in range(0,1):
            subprocess.call("aplay ~/beep_sense.wav", shell=True)
    elif left < 300  and right > 300 and center > 300:
        subprocess.call("aplay ~/left_audio.wav", shell=True)
        for x in range(0,1):
            subprocess.call("aplay ~/beep_sense.wav", shell=True)
    elif right < 300 and left > 300 and center > 300:
        subprocess.call("aplay ~/right_audio.wav", shell=True)
        for x in range(0,1):
            subprocess.call("aplay ~/beep_sense.wav", shell=True)
    elif left < 300 and center < 300 and right > 300:
        subprocess.call("aplay ~/centerleft_audio.wav", shell=True)
        for x in range(0,1):
            subprocess.call("aplay ~/beep_sense.wav", shell=True)
    elif right < 300 and center < 300 and left > 300:
        subprocess.call("aplay ~/centerright_audio.wav", shell=True)
        for x in range(0,1):
            subprocess.call("aplay ~/beep_sense.wav", shell=True)

def filter(text):
    return ''.join(i for i in text if ord(i)<128)

try:
    while True:
        try: 
            #if (!cameraInitialized):
            #    sleep(5)
            #    camera = PiCamera()
            #    camera.rotation = 90
            #    camera.start_preview()
            #    cameraInitialized = True
            if (GPIO.input(GPIO_BUTTON)):
                subprocess.call("mpg123 -q ~/capturing.mp3", shell=True)
                #sleep(1)
                takeSnapshot()
                #sleep(2)
                subprocess.call("mpg123 -q ~/converting.mp3", shell=True)
                #text = "Test String"
                text = convertImage()
                text = filter(text)
                textToSpeech(text)
                #textToSpeech("The quick brown fox jumps over the lazy dog")
                #subprocess.call("aplay ~/speech.wav", shell=True)
            measure()
            time.sleep(0.8)
        except:
            subprocess.call("mpg123 -q ~/error.mp3", shell=True)
        

except KeyboardInterrupt:
    print("Stop")
    camera.stop_preview()
    camera.close()
    GPIO.cleanup()

